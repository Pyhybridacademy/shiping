from django.db import models

class Shipment(models.Model):
    STATUS_CHOICES = [
        ('pending', 'Pending'),
        ('picked', 'Picked by Courier'),
        ('on_hold', 'On Hold'),
        ('on_way', 'On the Way'),
        ('custom_hold', 'Custom Hold'),
        ('delivered', 'Delivered'),
    ]
    
    PAYMENT_STATUS = [
        ('not_required', 'Not Required'),
        ('awaiting_payment', 'Awaiting Payment'),
        ('paid', 'Paid'),
    ]
    
    PAYMENT_METHOD = [
        ('bitcoin', 'Bitcoin'),
        ('usdt', 'USDT (Tether)'),
    ]
    
    # Tracking Information
    tracking_number = models.CharField(max_length=100, unique=True)
    
    # Sender Information
    sender_name = models.CharField(max_length=150)
    sender_address = models.TextField()
    sender_email = models.EmailField()
    sender_phone = models.CharField(max_length=20)
    
    # Receiver Information
    receiver_name = models.CharField(max_length=150)
    receiver_address = models.TextField()
    receiver_email = models.EmailField()
    receiver_phone = models.CharField(max_length=20)
    
    # Shipment Details
    origin = models.CharField(max_length=150)
    destination = models.CharField(max_length=150)
    current_location = models.CharField(max_length=150)
    status = models.CharField(max_length=50, choices=STATUS_CHOICES, default='pending')
    remarks = models.TextField(blank=True, null=True)
    
    # Parcel Information
    parcel_description = models.TextField(blank=True, null=True)
    parcel_weight = models.DecimalField(max_digits=10, decimal_places=2, default=0)
    parcel_image = models.ImageField(upload_to='parcel_images/', blank=True, null=True)
    
    # Payment fields
    require_payment = models.BooleanField(default=False)
    show_payment_info = models.BooleanField(default=True)  # New field to show/hide payment info
    payment_method = models.CharField(max_length=20, choices=PAYMENT_METHOD, default='bitcoin')
    shipment_cost = models.DecimalField(max_digits=10, decimal_places=2, default=0)
    clearance_cost = models.DecimalField(max_digits=10, decimal_places=2, default=0)
    total_cost = models.DecimalField(max_digits=10, decimal_places=2, default=0)
    crypto_wallet = models.CharField(max_length=255, blank=True, null=True)
    payment_status = models.CharField(max_length=20, choices=PAYMENT_STATUS, default='not_required')
    
    # Timestamps
    date_created = models.DateTimeField(auto_now_add=True)
    last_updated = models.DateTimeField(auto_now=True)
    estimated_delivery = models.DateField(blank=True, null=True)
    
    def save(self, *args, **kwargs):
        self.total_cost = self.shipment_cost + self.clearance_cost
        super().save(*args, **kwargs)
    
    def __str__(self):
        return f"{self.tracking_number} - {self.status}"


class PaymentProof(models.Model):
    shipment = models.OneToOneField(Shipment, on_delete=models.CASCADE)
    image = models.ImageField(upload_to='payment_proofs/')
    date_uploaded = models.DateTimeField(auto_now_add=True)
    is_verified = models.BooleanField(default=False)
    
    def __str__(self):
        return f"Proof for {self.shipment.tracking_number}"


class PDFStamp(models.Model):
    name = models.CharField(max_length=100)
    stamp_image = models.ImageField(upload_to='pdf_stamps/')
    signature_image = models.ImageField(upload_to='pdf_signatures/')
    is_active = models.BooleanField(default=True)
    
    def __str__(self):
        return self.name


# Add this to your models.py
class SiteSettings(models.Model):
    site_name = models.CharField(max_length=200, default="GlobalTrack Pro")
    company_name = models.CharField(max_length=200, default="GlobalTrack Pro")
    contact_email = models.EmailField(default="support@globaltrackpro.com")
    contact_phone = models.CharField(max_length=20, default="+1 (555) 123-4567")
    company_address = models.TextField(default="Global Headquarters")
    website_url = models.URLField(default="https://globaltrackpro.com")
    
    # Social Media (optional)
    facebook_url = models.URLField(blank=True, null=True)
    twitter_url = models.URLField(blank=True, null=True)
    linkedin_url = models.URLField(blank=True, null=True)
    
    # PDF Settings
    pdf_header_title = models.CharField(max_length=200, default="SHIPMENT TRACKING REPORT")
    pdf_footer_text = models.TextField(default="Generated by GlobalTrack Pro - Professional Shipping Solutions")
    
    # Logo
    company_logo = models.ImageField(upload_to='site_logos/', blank=True, null=True)
    
    # Timestamp
    updated_at = models.DateTimeField(auto_now=True)
    
    class Meta:
        verbose_name = "Site Settings"
        verbose_name_plural = "Site Settings"
    
    def save(self, *args, **kwargs):
        # Ensure only one instance exists
        self.__class__.objects.exclude(id=self.id).delete()
        super().save(*args, **kwargs)
    
    @classmethod
    def load(cls):
        try:
            return cls.objects.get()
        except cls.DoesNotExist:
            return cls.objects.create()
    
    def __str__(self):
        return "Site Configuration"